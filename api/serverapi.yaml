openapi: 3.0.3
info:
  contact:
    email: contact@mightycode.fr
    url: https://mightycode.fr/
  description: |
    This is a prototype of CPOO Project's front/back API.
  title: CPOO Server API
  version: 0.0.1
servers:
  - url: http://localhost:8080/
security:
  - CookieAuth: [ ]
tags:
  - name: authentication
    description: User authentication.
paths:
  /user/signup:
    post:
      security: [ ]
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/signin:
    post:
      security: [ ]
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
          headers:
            Set-Cookie:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/signout:
    post:
      tags:
        - authentication
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{username}:
    delete:
      summary: Delete a user account
      description: Delete the account of the user matching the given username.
        Only the administrator can use this endpoint.
      tags:
        - administration
      parameters:
        - description: username of the user account to delete.
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: 'Not found: User account not found.'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/forgotpwd:
    post:
      tags : 
       - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/NewPasswordDTO'
                  
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/currentuser:
    post:
      tags : 
       - authentication                  
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/settings:
    get:
      tags:
        - user settings
      summary: Get user settings information
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/account/chgusername:
    patch:
      tags:
        - user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/account/changepp:
    patch:
      tags:
        - user settings
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              title: url
              type: string
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /user/changepwd:
    patch:
      tags : 
       - user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ChangePasswordDTO'
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/notifications:
    patch:
      tags:
        - user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/NotificationsDTO'
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /user/change-theme:
    patch:
      tags:
        - user settings
      summary: Change user theme
      requestBody:
        required: true
        content:
          text/plain:
            schema :
              title : themeId
      responses:
        '200':
          description: Theme changed successfully
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/language:
    patch:
      tags:
        - user settings
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              title: language
              type: string
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /discussions:
    get:
      tags:
        - messaging
      summary: Get a list of all discussions of the current user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscussionDTO'
    post:
      tags:
        - messaging
      summary: Create a new discussion with a user
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              title: user
              type: string
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    patch:
      tags:
        - messaging
      summary: Set timestamp to actual time
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              title: discussionID
              type: string
      responses:
        '200':
          description: Timestamp change successfully
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  
  /discussions/unreadmessage:
    patch:
      tags:
        - messaging
      summary: Change unread message parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnreadMessageDTO'
      responses:
        '200':
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
                  
  /discussions/{discussion_id}/messages:
    get:
      tags:
        - messaging
      summary: Get all messages in a discussion
      parameters:
        - name: discussion_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDTO'
                  
  /discussions/message:
    post:
      tags:
        - messaging
      summary: Send a message in a disccusion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageDTO'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDTO'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    get:
      tags:
        - messaging
      summary: Receive a message
      responses:
        '200':
          description: 'Success: a message is available'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDTO'
        '202':
          description: 'Accepted: no message available yet'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
                
components:
  schemas:
    UserDTO:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: alice
        email:
          type: string
          example: alice@mymail.com
        password:
          type: string
          example: pass
    UserSettingsDTO:
      type: object
      required:
        - theme
        - language
        - unreadBadges
        - notificationSound
        - profileImage
      properties:
        theme:
          type: integer
          example: 2
        language:
          type: string
          example: english
        unreadBadges:
          type: boolean
        notificationSound:
          type: boolean
        profileImage:
          type: string
    PostMessageDTO:
      description: Message to send
      type: object
      required:
        - to
        - type
        - body
      properties:
        to:
          type: string
          example: bob@acme
        type:
          type: string
          format: mime
          example: text/plain
        body:
          type: string
          example: This is the message
    MessageDTO:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/PostMessageDTO'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              example: 667bdc23-3de4-482f-a0f4-3391452a7742
            timestamp:
              type: integer
              format: int64
              example: 1720294759999
            from:
              type: string
              example: alice@acme

    DiscussionDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 667bdc23-3de4-482f-a0f4-3391452a7742
        timestamp:
          type: integer
          format: int64
          example: 1720294759999
        user1:
          type: string
          example: alice@acme
        user2:
          type: string
          example: bob@acme
        unreadMessage:
          type: boolean
    NewPasswordDTO:
      type : object
      properties :
        email:
          type : string
          example: alice@mymail.com
        code :
          type : integer
          example: 1549
        password :
          type : string
          example: pass
    ChangePasswordDTO:
      type : object
      properties :
        oldpassword:
          type : string
          example: oldpassword
        newpassword : 
          type : string
          example: newpassword
    NotificationsDTO:
      type: object
      properties:
        sounds:
          type: boolean
        badges:
          type: boolean
    UnreadMessageDTO:
      type: object
      required:
        - discussionId
        - unread_message
      properties:
        discussionId:
          type: string
          format: uuid
          example: 667bdc23-3de4-482f-a0f4-3391452a7742
        unreadMessage:
          type: boolean
          example: false
    ErrorDTO:
      description: Error information
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error
          example: 2023-10-03T14:53:59.870+00:00
        status:
          type: integer
          description: HTTP response status
          example: 401
        error:
          type: string
          description: HTTP response error
          example: Unauthorized
        message:
          type: string
          description: HTTP response message
          example: Bad credentials
        path:
          type: string
          description: Path of the endpoint called
          example: /user/signin
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
      description: Use a session cookie to authenticate (see /login).
x-samples-languages:
  - curl
  - javascript
  - node
  - java
  - python
  - php
